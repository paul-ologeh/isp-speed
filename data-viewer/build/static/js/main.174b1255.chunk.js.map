{"version":3,"sources":["Plot.js","App.js","reportWebVitals.js","index.js"],"names":["axisStyle","ticks","color","title","Plot","state","view","tickCount","Infinity","toggleView","e","data","setState","props","upload","download","setTickCount","value","OptionPanel","Button","onClick","parentColor","Dropdown","text","icon","floating","labeled","button","className","Menu","Header","content","Divider","Item","label","empty","circular","Statistic","size","Value","average","dataReducer","length","slice","avg","i","y","Math","round","this","width","height","xType","margin","bottom","hideLine","tickLabelAngle","style","strokeWidth","curve","Component","print","console","log","tabColors","All","EE","Vodafone","Three","TalkTalk","VPN","ISPBanner","Container","Grid","columns","Row","centered","Column","Image","src","process","WhatIsThis","React","useState","open","setOpen","Modal","onClose","onOpen","trigger","Content","Description","Actions","App","activeTab","csvData","lastTime","filterData","name","rawData","uploads","downloads","avgDownload","avgUpload","Data","noneCount","datapoint","includes","isNaN","parseFloat","time","Date","unshift","x","handleTabClick","clear","GetData","Papa","fetchCsv","parse","N","temp","lastUpdate","fetch","response","reader","body","getReader","read","result","decoder","TextDecoder","csv","decode","flex","as","inverted","attached","tabular","header","active","position","Segment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.174b1255.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { XYPlot, XAxis, YAxis, HorizontalGridLines, LineSeriesCanvas, VerticalGridLines } from 'react-vis';\nimport '../node_modules/react-vis/dist/style.css';\nimport { Button, Dropdown, Statistic } from 'semantic-ui-react';\n\n\nconst axisStyle = {\n    ticks: {\n        color: '#333'\n    },\n    title: {\n        color: '#333'\n    }\n};\n\nclass Plot extends Component {\n\n    state = {\n        view: 'Download',\n        tickCount: Infinity,\n        // data: null\n    }\n\n    toggleView = (e, data) => {\n        if (this.state.view === 'Download') {\n            this.setState({ view: 'Upload', data: this.props.upload });\n        }\n        else {\n            this.setState({ view: 'Download', data: this.props.download  });\n        }\n    }\n\n    setTickCount = (e, data) => {\n        this.setState({tickCount: data.value})\n    }\n\n    OptionPanel = () => {\n        return (\n            <div>\n                <Button onClick={this.toggleView} color={this.props.parentColor}>Show {this.state.view === 'Download' ? 'Upload' : 'Download'}</Button>\n                <Dropdown\n                    text='Data Filter'\n                    icon='filter'\n                    floating\n                    labeled\n                    button\n                    className='icon'\n                >\n                    <Dropdown.Menu>\n                        <Dropdown.Header icon='tags' content='Filter By Days' />\n                        <Dropdown.Divider />\n                        <Dropdown.Item\n                            label={{ color: 'red', empty: true, circular: true }}\n                            text='Last 24 hours'\n                            value={24+1}\n                            onClick={this.setTickCount}\n                        />\n                        <Dropdown.Item\n                            label={{ color: 'blue', empty: true, circular: true }}\n                            text='Last 7 days'\n                            value={7*(24+1)}\n                            onClick={this.setTickCount}\n                        />\n                        <Dropdown.Item\n                            label={{ color: 'black', empty: true, circular: true }}\n                            text='Last 30 days'\n                            value={30*(24+1)}\n                            onClick={this.setTickCount}\n                        />\n                    </Dropdown.Menu>\n                </Dropdown>\n                <Statistic size={'mini'}>\n                    <Statistic.Value>Average: {this.average(this.dataReducer())} Mbps</Statistic.Value>\n                </Statistic>\n            </div >\n        )\n    }\n\n    dataReducer = () => {\n        if (this.state.tickCount === Infinity){\n            return this.state.view === 'Upload' ? this.props.upload : this.props.download\n        }\n        else{\n            let length = this.props.download.length;\n            return this.state.view === 'Download' ? this.props.download.slice(length - this.state.tickCount,length) : this.props.upload.slice(length - this.state.tickCount,length)\n        }\n    }\n\n    average = (data) => {\n        if (data === null){\n            return null\n        }\n        let avg = 0;\n        for (let i = 0; i < data.length; i++){\n            avg += data[i].y;\n        }\n        avg = avg / (data.length - 1)\n        return Math.round(avg * 100) / 100\n    }\n\n    render() {\n\n        return (\n            <>\n                {this.OptionPanel()}\n                <XYPlot \n                width={900}\n                height={500}\n                xType={\"time\"}\n                margin={{ bottom: 100 }}\n                >\n                    <HorizontalGridLines />\n                    <VerticalGridLines />\n                    <XAxis\n                        hideLine\n                        tickLabelAngle={-30}\n                        style={axisStyle}\n                    />\n                    <YAxis\n                        hideLine\n                        title=\"Speed (Mbps)\"\n                        style={axisStyle}\n                    />\n                    <LineSeriesCanvas\n                        style={{ strokeWidth: 5 }}\n                        curve={'curveBasis'}\n                        data={this.dataReducer()}\n                    />\n                </XYPlot>\n            </>\n        )\n    }\n}\n\nexport default Plot;","import React, { Component } from 'react';\nimport { Container, Modal, Button, Header, Menu, Segment, Image, Grid, Icon } from 'semantic-ui-react';\nimport Papa from 'papaparse';\nimport Plot from './Plot';\nimport './App.css';\n\n\nconst print = (text) => {\n  console.log(text)\n}\n\nconst tabColors = {\n  All: 'blue',\n  EE: 'teal',\n  Vodafone: 'red',\n  Three: 'black',\n  TalkTalk: 'grey',\n  VPN: 'purple'\n}\n\nconst ISPBanner = () => {\n  return (\n    <Container>\n      <Grid columns={4}>\n        <Grid.Row centered>\n          <Grid.Column>\n            <Image src={process.env.PUBLIC_URL + '/EE.jpg'} size='tiny' />\n          </Grid.Column>\n          <Grid.Column>\n            <Image src={process.env.PUBLIC_URL + '/Three.png'} size='tiny' />\n          </Grid.Column>\n          <Grid.Column>\n            <Image src={process.env.PUBLIC_URL + '/Vodafone.png'} size='tiny' />\n          </Grid.Column>\n          <Grid.Column>\n            <Image src={process.env.PUBLIC_URL + '/TalkTalk.jpg'} size='tiny' />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Container>\n  )\n}\n\n\nfunction WhatIsThis() {\n  const [open, setOpen] = React.useState(false)\n\n  return (\n    <Modal\n      centered={false}\n      open={open}\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n      trigger={<Button>About</Button>}\n    >\n      <Modal.Header>What Is This?</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          This tool tracks the speed of my internet service provider.\n          It runs an internet speed test every hour and stores this data.\n          I have had multiple ISPs and wanted to compare their performance and figure out who the best is.\n        </Modal.Description>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button onClick={() => setOpen(false)}>OK</Button>\n      </Modal.Actions>\n    </Modal>\n  )\n}\n\nclass App extends Component {\n\n  state = {\n    activeTab: 'All',\n    csvData: null,\n    upload: null,\n    download: null,\n    lastTime: null\n  };\n\n  componentDidMount() {\n    console.clear()\n    this.GetData();\n    print('Fetched and filtered data')\n    print(this.state.csvData)\n  }\n\n  async GetData() {\n    const data = Papa.parse(await this.fetchCsv());\n    this.setState({ csvData: data })\n    this.filterData('All', data.data)\n    let N = data.data.length - 2;\n    let temp = data.data[N]\n    let lastUpdate = `${temp[0]} ${temp[1]}`;\n    this.setState({ lastTime: lastUpdate })\n    return data;\n  }\n\n  async fetchCsv() {\n    const response = await fetch(process.env.PUBLIC_URL + '/speed_data.csv');\n    const reader = response.body.getReader();\n    const result = await reader.read();\n    const decoder = new TextDecoder('utf-8');\n    const csv = decoder.decode(result.value);\n    return csv;\n  }\n\n  filterData = (name, rawData) => {\n    let uploads = [];\n    let downloads = [];\n    let avgDownload = 0;\n    let avgUpload = 0;\n    const Data = (rawData !== null) ? [...rawData] : this.state.csvData.data;\n    let N = Data.length - 1;\n    // let count = 0;\n    let noneCount = 0;\n\n    for (let i = N - 1; i > 0; i--) {\n      let datapoint = Data[i];\n      if (datapoint[5] === 'none') {\n        noneCount++;\n        if (noneCount === 3) {\n          noneCount = 0;\n          continue;\n        }\n      }\n      if (datapoint[5] === 'none' && !(i % 3 === 0)) {\n        continue;\n      }\n      if (name === 'EE' && datapoint[5] !== 'EE') {\n        continue;\n      }\n      if (name === 'TalkTalk' && datapoint[5] !== 'TalkTalk') {\n        continue;\n      }\n      if (name === 'Three' && datapoint[5] !== 'Three') {\n        continue;\n      }\n      if (name === 'Vodafone' && datapoint[5] !== 'Vodafone') {\n        continue;\n      }\n      let All = ['EE', 'TalkTalk', 'Three', 'Vodafone']\n      if (name === 'VPN' && All.includes(datapoint[5])) {\n        continue;\n      }\n\n      datapoint[2] = (isNaN(datapoint[2]) || datapoint[2] === '') ? 0 : datapoint[2];\n      datapoint[3] = (isNaN(datapoint[3]) || datapoint[3] === '') ? 0 : datapoint[3];\n      avgDownload += parseFloat(datapoint[2]);\n      avgUpload += parseFloat(datapoint[3]);\n      let time = datapoint[0] + \" \" + datapoint[1];\n      time = new Date(time)\n\n      if (i % 3 === 0 && i !== 0) {\n        avgDownload = avgDownload / 3;\n        avgUpload = avgUpload / 3;\n        downloads.unshift({ x: time, y: avgDownload });\n        uploads.unshift({ x: time, y: avgUpload });\n        avgDownload = 0;\n        avgUpload = 0;\n      }\n      // count++;\n\n      // if (count < 24*3) {\n      //   // break;\n      // }\n    }\n\n\n    this.setState({ download: downloads, upload: uploads });\n  }\n\n  handleTabClick = (e, { name }) => {\n    print(`clicked ${name}`)\n    this.filterData(name, null);\n    this.setState({ activeTab: name });\n  }\n\n  render() {\n\n    const { activeTab } = this.state;\n    return (\n      <div className=\"App\" style={{ flex: 1 }} >\n        <br></br>\n        <Header as='h1' size='large' >Paul's ISP Speed Tracker</Header>\n        <br></br>\n        <br></br>\n        <ISPBanner />\n        <br></br>\n        <br></br>\n        <br></br>\n        <Container>\n          <Menu color={tabColors[activeTab]} inverted attached=\"top\" tabular>\n            <Menu.Item\n              name=\"All\"\n              header={true}\n              active={activeTab === 'All'}\n              onClick={this.handleTabClick}\n            />\n            <Menu.Item\n              name=\"EE\"\n              active={activeTab === 'EE'}\n              onClick={this.handleTabClick}\n            />\n            <Menu.Item\n              name=\"Vodafone\"\n              active={activeTab === 'Vodafone'}\n              onClick={this.handleTabClick}\n            />\n            <Menu.Item\n              name=\"Three\"\n              active={activeTab === 'Three'}\n              onClick={this.handleTabClick}\n            />\n            <Menu.Item\n              name=\"TalkTalk\"\n              active={activeTab === 'TalkTalk'}\n              onClick={this.handleTabClick}\n            />\n            <Menu.Item\n              name=\"VPN\"\n              active={activeTab === 'VPN'}\n              onClick={this.handleTabClick}\n            />\n            <Menu.Item>\n              <WhatIsThis parentColor={tabColors[activeTab]}/>\n            </Menu.Item>\n\n            <Menu.Item position='right'> Last Updated on : {this.state.lastTime}</Menu.Item>\n\n          </Menu>\n\n          <Segment attached='bottom'>\n            <Container>\n              <Plot parentColor={tabColors[activeTab]} upload={this.state.upload} download={this.state.download} />\n            </Container>\n\n          </Segment>\n\n        </Container>\n      </div>\n    )\n  }\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}